<?php	abstract class BasicShapeAbstract{				// Unique id of the item. Animations and transformations are integrated with this id.		public $id;				// shape type, eg: rect, circle, ellipse, line, polyline, polygon, etc		public $shapeType;				// array of sub elements. 		public $components; 				// class of the object. Valid for rect, circle, ellipse, line, polyline and polygon		public $objClass;				// style of the object. Valid for rect, circle, ellipse, line, polyline and polygon		public $style;				// transfor for the object. Valid for rect, circle, ellipse, line, polyline and polygon		public $transform;				// x axis value for the object. Valid for rect		public $x; 				// y axis value for the object. Valid for rect		public $y; 				// width of the object. Valid for rect		public $width; 				// height of the object. Valid for rect		public $height; 				// center x value of a rounded rect		public $rx;				// center y value of a rounded rect		public $ry;				// x axis value of the center. Valid for circle and ellipse		public $centerX; 				// y axis value of the center. Valid for circle and ellipse		public $centerY; 				// radius. Valid for circle		public $radius; 				// x axis value of the radius. Valid for ellipse		public $radiusX; 				// y axis value of the radius. Valid for ellipse		public $radiusY; 				// line, begining and ending points: 		public $x1, $x2, $y1, $y2;				// points set. Valid for polyline and polygon		public $points;				// stroke properties:		public $stroke, $strokeWidth, $strokeLinecap, $strokeDasharray;				// Fill: The operation of painting the interior of a shape or the interior of the character glyphs in a text string.		public $fill;				// source. Valid in image:		public $source;				// The following event variables can be tied to ecmascript functions		public $events = array("onfocusin"=>"", "onfocusout"=>"", "onactivate"=>"", "onclick"=>"", "onmousedown"=>"", "onmouseup"=>"", "onmouseover"=>"", "onmousemove"=>"", "onmouseout"=>"", "onload"=>"", "onunload"=>"", "onabort"=>"", "onerror"=>"", "onresize"=>"", "onscroll"=>"", "onzoom"=>"", "onbegin"=>"", "onend"=>"", "onrepeat"=>"");				// array of attribute values. Used in ajax response		public $attributeValues = array();				// length between letters. Valid for letters.		public $textLength;				// text anchor, Valid for text		public $textAnchor;				// font size, Valid for text		public $fontSize;				public $fontfamily;				// A list of lengths which moves the characters relative to the absolute position of the last glyph drawn. Valid for text		public $dx, $dy;				// rotation values of the letters in a string:		public $rotate; 						// array of properties, key is the class property and value is the tag attribute		public $validProperties = array(			"id"=>"id", "objClass"=>"class", "style"=>"style", "transform"=>"transform", "x"=>"x", "y"=>"y", "width"=>"width", "height"=>"height", "fill"=>"fill",			"source"=>"xlink:href","rx"=>"rx", "ry"=>"ry", "centerX"=>"cx", "centerY"=>"cy", "radius"=>"r", "radiusX"=>"rx", "radiusY"=>"ry", "x1"=>"x1", "x2"=>"x2", "y1"=>"y1", "y2"=>"y2", 			"rotate"=>"rotate", "points"=>"points", "fontSize"=>"font-size" ,"fontfamily"=>"font-family" , "textAnchor"=>"text-anchor", "textLength"=>"textLength" , "stroke"=>"stroke", "strokeWidth"=>"stroke-width", "strokeLinecap"=>"stroke-linecap", "strokeDasharray"=>"stroke-dasharray"		);						public function addComponent($componentObj){			$this->components[] = $componentObj->render();		}						public function decorate(){			$response = "";					if(sizeof($this->components) > 0){				foreach($this->components AS $key=>$component){					$response .= "\n\t\t".$component;				}			}						return $response;		}				public function renderEvents(){			$response = "";			foreach($this->events AS $event=>$jsFunction){				if($jsFunction != ""){						$response .= $event.'="'.$jsFunction.'()" ';				}			}			return $response;		}				public function relateEvent($svgAjaxAdapter){			$this->events[$svgAjaxAdapter->event] = $svgAjaxAdapter->jsFunctionName;		}				public function setStroke($stroke, $strokeWidth, $strokeLinecap, $strokeDasharray){			$this->stroke = $stroke;			$this->strokeWidth = $strokeWidth;			$this->strokeLinecap = $strokeLinecap;			$this->strokeDasharray = $strokeDasharray;		}				public function render(){						$response = "\n\t <".$this->shapeType;								if(sizeof($this->validProperties) > 0){					foreach($this->validProperties AS $property=>$attribute){						if($this->$property != NULL){ $response .= ' '.$attribute.'="'.$this->$property.'" ';}					}				}							$response .= $this->renderEvents();			$response .= " >";						$response .= $this->decorate();						$response .= "\n\t </".$this->shapeType."> ";						return $response;					}				public function getElementAttributes(){					foreach($this->validProperties AS $property=>$attribute){				if($this->$property != NULL){					$this->attributeValues[$attribute] = $this->$property;				}			}					return $this->attributeValues;		}			}?>